<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/reminderapp/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/reminderapp/MainActivity.kt" />
              <option name="originalContent" value="package com.example.reminderapp&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;// Animation imports&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import com.kizitonwose.calendar.compose.HorizontalCalendar&#10;import com.kizitonwose.calendar.compose.rememberCalendarState&#10;import com.kizitonwose.calendar.core.CalendarDay&#10;import com.kizitonwose.calendar.core.DayPosition&#10;import com.kizitonwose.calendar.core.daysOfWeek&#10;import java.time.LocalDate&#10;import java.time.YearMonth&#10;import java.time.format.DateTimeFormatter&#10;import java.time.format.TextStyle&#10;import java.util.*&#10;import com.example.reminderapp.ui.theme.ReminderAppTheme&#10;import com.example.reminderapp.ui.screens.AddReminderScreen&#10;import com.example.reminderapp.ui.screens.DayRemindersScreen&#10;import com.example.reminderapp.ui.screens.EditReminderScreen&#10;import com.example.reminderapp.ui.screens.SettingsScreen&#10;import com.example.reminderapp.ui.screens.UpcomingTasksScreen&#10;import com.example.reminderapp.data.Reminder&#10;import com.example.reminderapp.data.SchoolClass&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.compose.runtime.collectAsState&#10;import com.example.reminderapp.viewmodel.ReminderViewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private val requestNotificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted: Boolean -&gt;&#10;        if (!isGranted) {&#10;            // Could show a dialog explaining why notifications are important&#10;            // For now, the app will work but notifications won't show&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        // Request notification permission for Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            if (ContextCompat.checkSelfPermission(&#10;                    this,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                requestNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;            }&#10;        }&#10;&#10;        setContent {&#10;            val viewModel: ReminderViewModel = viewModel()&#10;            val isDarkMode by viewModel.isDarkMode.collectAsState()&#10;&#10;            ReminderAppTheme(darkTheme = isDarkMode) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    ReminderApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ReminderApp() {&#10;    val viewModel: ReminderViewModel = viewModel()&#10;&#10;    var currentScreen by remember { mutableStateOf(&quot;calendar&quot;) }&#10;    var reminderToEdit by remember { mutableStateOf&lt;Reminder?&gt;(null) }&#10;&#10;    // Collect state from ViewModel&#10;    val selectedDate by viewModel.selectedDate.collectAsState()&#10;    val allReminders by viewModel.allReminders.collectAsState()&#10;    val selectedDateReminders by viewModel.selectedDateReminders.collectAsState()&#10;    val schoolClasses by viewModel.schoolClasses.collectAsState()&#10;    val notificationSettings by viewModel.notificationSettings.collectAsState()&#10;&#10;    // Animated content transition&#10;    AnimatedContent(&#10;        targetState = currentScreen,&#10;        transitionSpec = {&#10;            // Define your transition animations here&#10;            slideInHorizontally(&#10;                initialOffsetX = { fullWidth -&gt; fullWidth }&#10;            ) + fadeIn() togetherWith slideOutHorizontally(&#10;                targetOffsetX = { fullWidth -&gt; -fullWidth }&#10;            ) + fadeOut()&#10;        },&#10;        label = &quot;screen_transition&quot;&#10;    ) { screen -&gt;&#10;        when (screen) {&#10;            &quot;calendar&quot; -&gt; CalendarScreen(&#10;                selectedDate = selectedDate,&#10;                reminders = selectedDateReminders,&#10;                availableClasses = schoolClasses,&#10;                onDateSelected = { viewModel.selectDate(it) },&#10;                onAddReminderClick = { currentScreen = &quot;add_reminder&quot; },&#10;                onSeeMoreClick = { currentScreen = &quot;day_reminders&quot; },&#10;                onSettingsClick = { currentScreen = &quot;settings&quot; },&#10;                onUpcomingTasksClick = { currentScreen = &quot;upcoming_tasks&quot; }&#10;            )&#10;            &quot;add_reminder&quot; -&gt; AddReminderScreen(&#10;                selectedDate = selectedDate,&#10;                availableClasses = schoolClasses,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; },&#10;                onReminderSaved = { reminder -&gt;&#10;                    viewModel.addReminder(reminder)&#10;                    currentScreen = &quot;calendar&quot;&#10;                }&#10;            )&#10;            &quot;day_reminders&quot; -&gt; DayRemindersScreen(&#10;                selectedDate = selectedDate,&#10;                reminders = selectedDateReminders,&#10;                availableClasses = schoolClasses,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; },&#10;                onEditReminder = { reminder -&gt;&#10;                    reminderToEdit = reminder&#10;                    currentScreen = &quot;edit_reminder&quot;&#10;                },&#10;                onDeleteReminder = { reminder -&gt;&#10;                    viewModel.deleteReminder(reminder)&#10;                }&#10;            )&#10;            &quot;edit_reminder&quot; -&gt; {&#10;                reminderToEdit?.let { reminder -&gt;&#10;                    EditReminderScreen(&#10;                        reminder = reminder,&#10;                        availableClasses = schoolClasses,&#10;                        onNavigateBack = {&#10;                            reminderToEdit = null&#10;                            currentScreen = &quot;day_reminders&quot;&#10;                        },&#10;                        onReminderUpdated = { updatedReminder -&gt;&#10;                            viewModel.updateReminder(updatedReminder)&#10;                            reminderToEdit = null&#10;                            currentScreen = &quot;day_reminders&quot;&#10;                        },&#10;                        onReminderDeleted = { reminderToDelete -&gt;&#10;                            viewModel.deleteReminder(reminderToDelete)&#10;                            reminderToEdit = null&#10;                            currentScreen = &quot;day_reminders&quot;&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;            &quot;settings&quot; -&gt; SettingsScreen(&#10;                classes = schoolClasses,&#10;                notificationSettings = notificationSettings,&#10;                isDarkMode = viewModel.isDarkMode.collectAsState().value,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; },&#10;                onClassesUpdated = { newClasses -&gt;&#10;                    viewModel.updateSchoolClasses(newClasses)&#10;                },&#10;                onNotificationSettingsUpdated = { newSettings -&gt;&#10;                    viewModel.updateNotificationSettings(newSettings)&#10;                },&#10;                onDarkModeToggled = { enabled -&gt;&#10;                    viewModel.toggleDarkMode(enabled)&#10;                }&#10;            )&#10;            &quot;upcoming_tasks&quot; -&gt; UpcomingTasksScreen(&#10;                reminders = allReminders,&#10;                availableClasses = schoolClasses,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarScreen(&#10;    selectedDate: LocalDate,&#10;    reminders: List&lt;Reminder&gt;,&#10;    availableClasses: List&lt;SchoolClass&gt; = emptyList(),&#10;    onDateSelected: (LocalDate) -&gt; Unit,&#10;    onAddReminderClick: () -&gt; Unit,&#10;    onSeeMoreClick: () -&gt; Unit,&#10;    onSettingsClick: () -&gt; Unit,&#10;    onUpcomingTasksClick: () -&gt; Unit = {}&#10;) {&#10;    val today = remember { LocalDate.now() }&#10;    val currentMonth = remember { YearMonth.now() }&#10;    val startMonth = remember { currentMonth.minusMonths(12) }&#10;    val endMonth = remember { currentMonth.plusMonths(12) }&#10;    val daysOfWeek = remember { daysOfWeek() }&#10;&#10;    // Collect all reminders from the parent component&#10;    val viewModel: ReminderViewModel = viewModel()&#10;    val allReminders by viewModel.allReminders.collectAsState()&#10;&#10;    val state = rememberCalendarState(&#10;        startMonth = startMonth,&#10;        endMonth = endMonth,&#10;        firstVisibleMonth = currentMonth,&#10;        firstDayOfWeek = daysOfWeek.first()&#10;    )&#10;&#10;    // Track the currently visible month for display&#10;    val visibleMonth by remember {&#10;        derivedStateOf { state.firstVisibleMonth.yearMonth }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .statusBarsPadding()&#10;                .navigationBarsPadding()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // App Title (without settings button)&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;School Reminders&quot;,&#10;                    fontSize = 28.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp)&#10;                )&#10;            }&#10;&#10;            // Month/Year Header&#10;            Text(&#10;                text = visibleMonth.format(&#10;                    DateTimeFormatter.ofPattern(&quot;MMMM yyyy&quot;)&#10;                ),&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onBackground,&#10;                modifier = Modifier.padding(vertical = 16.dp)&#10;            )&#10;&#10;            // Days of Week Header&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                daysOfWeek.forEach { dayOfWeek -&gt;&#10;                    Text(&#10;                        text = dayOfWeek.getDisplayName(TextStyle.SHORT, Locale.getDefault()),&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Calendar&#10;            HorizontalCalendar(&#10;                state = state,&#10;                dayContent = { day -&gt;&#10;                    CalendarDay(&#10;                        day = day,&#10;                        isSelected = selectedDate == day.date,&#10;                        isToday = today == day.date,&#10;                        hasReminders = allReminders.any { it.date == day.date },&#10;                        onClick = { onDateSelected(day.date) }&#10;                    )&#10;                },&#10;                monthHeader = { /* Empty since we have custom header */ },&#10;                monthBody = { _, content -&gt;&#10;                    Column {&#10;                        content()&#10;                    }&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Selected Date Info with Reminder Preview&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                ),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(20.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Selected Date&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = selectedDate.format(DateTimeFormatter.ofPattern(&quot;EEEE, MMMM d, yyyy&quot;)),&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Reminders preview&#10;                    val dayReminders = reminders.filter { it.date == selectedDate }&#10;&#10;                    if (dayReminders.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;No reminders scheduled&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    } else {&#10;                        // Show preview of first 2 reminders&#10;                        val previewReminders = dayReminders.take(2)&#10;&#10;                        previewReminders.forEach { reminder -&gt;&#10;                            val classInfo = availableClasses.find { it.name == reminder.className }&#10;                            val classColor = classInfo?.color ?: &quot;#95A5A6&quot;&#10;&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(vertical = 4.dp)&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(12.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(android.graphics.Color.parseColor(classColor)))&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                                Text(&#10;                                    text = reminder.name,&#10;                                    fontSize = 14.sp,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    maxLines = 1,&#10;                                    overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis,&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;&#10;                                Text(&#10;                                    text = reminder.className,&#10;                                    fontSize = 12.sp,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Show &quot;and X more&quot; if there are additional reminders&#10;                        if (dayReminders.size &gt; 2) {&#10;                            Text(&#10;                                text = &quot;and ${dayReminders.size - 2} more...&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                fontWeight = FontWeight.Medium,&#10;                                modifier = Modifier.padding(top = 4.dp)&#10;                            )&#10;                        }&#10;&#10;                        // See all button if there are reminders&#10;                        if (dayReminders.isNotEmpty()) {&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                            TextButton(&#10;                                onClick = onSeeMoreClick,&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;View All Reminders (${dayReminders.size})&quot;,&#10;                                    fontSize = 14.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            // Bottom Navigation with rounded card background&#10;            Box (&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .widthIn(min = 120.dp, max = 250.dp)&#10;                        .padding(horizontal = 50.dp, vertical = 8.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surface&#10;                    ),&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 12.dp)&#10;                            .padding(vertical = 8.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        // Add Reminder&#10;                        Column(&#10;                            modifier = Modifier.clickable { onAddReminderClick() },&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Add,&#10;                                contentDescription = &quot;Add Reminder&quot;,&#10;                                modifier = Modifier.size(24.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;&#10;                        // Upcoming Tasks&#10;                        Column(&#10;                            modifier = Modifier.clickable { onUpcomingTasksClick() },&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.DateRange,&#10;                                contentDescription = &quot;Upcoming Tasks&quot;,&#10;                                modifier = Modifier.size(22.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;&#10;                        // Settings&#10;                        Column(&#10;                            modifier = Modifier.clickable { onSettingsClick() },&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Settings,&#10;                                contentDescription = &quot;Settings&quot;,&#10;                                modifier = Modifier.size(24.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Settings Floating Action Button&#10;        /*FloatingActionButton(&#10;            onClick = onSettingsClick,&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(16.dp),&#10;            containerColor = MaterialTheme.colorScheme.secondary,&#10;            contentColor = MaterialTheme.colorScheme.onSecondary&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Settings&quot;,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }*/&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CalendarDay(&#10;    day: CalendarDay,&#10;    isSelected: Boolean,&#10;    isToday: Boolean,&#10;    hasReminders: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    // Animation states&#10;    var isPressed by remember { mutableStateOf(false) }&#10;    val scale by animateFloatAsState(&#10;        targetValue = if (isPressed) 0.95f else 1f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessLow&#10;        )&#10;    )&#10;&#10;    val backgroundColor by animateColorAsState(&#10;        targetValue = when {&#10;            isSelected -&gt; MaterialTheme.colorScheme.primary&#10;            isToday -&gt; MaterialTheme.colorScheme.primaryContainer&#10;            else -&gt; Color.Transparent&#10;        },&#10;        animationSpec = tween(durationMillis = 300, easing = EaseInOutCubic)&#10;    )&#10;&#10;    val textColor by animateColorAsState(&#10;        targetValue = when {&#10;            isSelected -&gt; MaterialTheme.colorScheme.onPrimary&#10;            isToday -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;            day.position != DayPosition.MonthDate -&gt; MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.3f)&#10;            else -&gt; MaterialTheme.colorScheme.onSurface&#10;        },&#10;        animationSpec = tween(durationMillis = 300, easing = EaseInOutCubic)&#10;    )&#10;&#10;    // Animated reminder dot&#10;    val dotScale by animateFloatAsState(&#10;        targetValue = if (hasReminders) 1f else 0f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessMedium&#10;        )&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .aspectRatio(1f)&#10;            .padding(2.dp)&#10;            .graphicsLayer {&#10;                scaleX = scale&#10;                scaleY = scale&#10;            }&#10;            .clip(CircleShape)&#10;            .background(backgroundColor)&#10;            .pointerInput(Unit) {&#10;                detectTapGestures(&#10;                    onPress = {&#10;                        if (day.position == DayPosition.MonthDate) {&#10;                            isPressed = true&#10;                            tryAwaitRelease()&#10;                            isPressed = false&#10;                        }&#10;                    },&#10;                    onTap = {&#10;                        if (day.position == DayPosition.MonthDate) {&#10;                            onClick()&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;            .padding(bottom = 8.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Date number - always centered&#10;        Text(&#10;            text = day.date.dayOfMonth.toString(),&#10;            fontSize = 16.sp,&#10;            fontWeight = if (isSelected || isToday) FontWeight.Bold else FontWeight.Normal,&#10;            color = textColor&#10;        )&#10;&#10;        // Animated dot indicator for reminders&#10;        if (hasReminders) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(6.dp)&#10;                    .graphicsLayer {&#10;                        scaleX = dotScale&#10;                        scaleY = dotScale&#10;                    }&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        if (isSelected) MaterialTheme.colorScheme.onPrimary&#10;                        else MaterialTheme.colorScheme.primary&#10;                    )&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 2.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.reminderapp&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.derivedStateOf&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;// Animation imports&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import com.kizitonwose.calendar.compose.HorizontalCalendar&#10;import com.kizitonwose.calendar.compose.rememberCalendarState&#10;import com.kizitonwose.calendar.core.CalendarDay&#10;import com.kizitonwose.calendar.core.DayPosition&#10;import com.kizitonwose.calendar.core.daysOfWeek&#10;import java.time.LocalDate&#10;import java.time.YearMonth&#10;import java.time.format.DateTimeFormatter&#10;import java.time.format.TextStyle&#10;import java.util.*&#10;import com.example.reminderapp.ui.theme.ReminderAppTheme&#10;import com.example.reminderapp.ui.screens.AddReminderScreen&#10;import com.example.reminderapp.ui.screens.DayRemindersScreen&#10;import com.example.reminderapp.ui.screens.EditReminderScreen&#10;import com.example.reminderapp.ui.screens.SettingsScreen&#10;import com.example.reminderapp.ui.screens.UpcomingTasksScreen&#10;import com.example.reminderapp.data.Reminder&#10;import com.example.reminderapp.data.SchoolClass&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.compose.runtime.collectAsState&#10;import com.example.reminderapp.viewmodel.ReminderViewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    private val requestNotificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted: Boolean -&gt;&#10;        if (!isGranted) {&#10;            // Could show a dialog explaining why notifications are important&#10;            // For now, the app will work but notifications won't show&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        // Request notification permission for Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            if (ContextCompat.checkSelfPermission(&#10;                    this,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) != PackageManager.PERMISSION_GRANTED&#10;            ) {&#10;                requestNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;            }&#10;        }&#10;&#10;        setContent {&#10;            val viewModel: ReminderViewModel = viewModel()&#10;            val isDarkMode by viewModel.isDarkMode.collectAsState()&#10;&#10;            ReminderAppTheme(darkTheme = isDarkMode) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    ReminderApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ReminderApp() {&#10;    val viewModel: ReminderViewModel = viewModel()&#10;&#10;    var currentScreen by remember { mutableStateOf(&quot;calendar&quot;) }&#10;    var reminderToEdit by remember { mutableStateOf&lt;Reminder?&gt;(null) }&#10;&#10;    // Collect state from ViewModel&#10;    val selectedDate by viewModel.selectedDate.collectAsState()&#10;    val allReminders by viewModel.allReminders.collectAsState()&#10;    val selectedDateReminders by viewModel.selectedDateReminders.collectAsState()&#10;    val schoolClasses by viewModel.schoolClasses.collectAsState()&#10;    val notificationSettings by viewModel.notificationSettings.collectAsState()&#10;&#10;    // Animated content transition&#10;    AnimatedContent(&#10;        targetState = currentScreen,&#10;        transitionSpec = {&#10;            // Define your transition animations here&#10;            slideInHorizontally(&#10;                initialOffsetX = { fullWidth -&gt; fullWidth }&#10;            ) + fadeIn() togetherWith slideOutHorizontally(&#10;                targetOffsetX = { fullWidth -&gt; -fullWidth }&#10;            ) + fadeOut()&#10;        },&#10;        label = &quot;screen_transition&quot;&#10;    ) { screen -&gt;&#10;        when (screen) {&#10;            &quot;calendar&quot; -&gt; CalendarScreen(&#10;                selectedDate = selectedDate,&#10;                reminders = selectedDateReminders,&#10;                availableClasses = schoolClasses,&#10;                onDateSelected = { viewModel.selectDate(it) },&#10;                onAddReminderClick = { currentScreen = &quot;add_reminder&quot; },&#10;                onSeeMoreClick = { currentScreen = &quot;day_reminders&quot; },&#10;                onSettingsClick = { currentScreen = &quot;settings&quot; },&#10;                onUpcomingTasksClick = { currentScreen = &quot;upcoming_tasks&quot; }&#10;            )&#10;            &quot;add_reminder&quot; -&gt; AddReminderScreen(&#10;                selectedDate = selectedDate,&#10;                availableClasses = schoolClasses,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; },&#10;                onReminderSaved = { reminder -&gt;&#10;                    viewModel.addReminder(reminder)&#10;                    currentScreen = &quot;calendar&quot;&#10;                }&#10;            )&#10;            &quot;day_reminders&quot; -&gt; DayRemindersScreen(&#10;                selectedDate = selectedDate,&#10;                reminders = selectedDateReminders,&#10;                availableClasses = schoolClasses,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; },&#10;                onEditReminder = { reminder -&gt;&#10;                    reminderToEdit = reminder&#10;                    currentScreen = &quot;edit_reminder&quot;&#10;                },&#10;                onDeleteReminder = { reminder -&gt;&#10;                    viewModel.deleteReminder(reminder)&#10;                }&#10;            )&#10;            &quot;edit_reminder&quot; -&gt; {&#10;                reminderToEdit?.let { reminder -&gt;&#10;                    EditReminderScreen(&#10;                        reminder = reminder,&#10;                        availableClasses = schoolClasses,&#10;                        onNavigateBack = {&#10;                            reminderToEdit = null&#10;                            currentScreen = &quot;day_reminders&quot;&#10;                        },&#10;                        onReminderUpdated = { updatedReminder -&gt;&#10;                            viewModel.updateReminder(updatedReminder)&#10;                            reminderToEdit = null&#10;                            currentScreen = &quot;day_reminders&quot;&#10;                        },&#10;                        onReminderDeleted = { reminderToDelete -&gt;&#10;                            viewModel.deleteReminder(reminderToDelete)&#10;                            reminderToEdit = null&#10;                            currentScreen = &quot;day_reminders&quot;&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;            &quot;settings&quot; -&gt; SettingsScreen(&#10;                classes = schoolClasses,&#10;                notificationSettings = notificationSettings,&#10;                isDarkMode = viewModel.isDarkMode.collectAsState().value,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; },&#10;                onClassesUpdated = { newClasses -&gt;&#10;                    viewModel.updateSchoolClasses(newClasses)&#10;                },&#10;                onNotificationSettingsUpdated = { newSettings -&gt;&#10;                    viewModel.updateNotificationSettings(newSettings)&#10;                },&#10;                onDarkModeToggled = { enabled -&gt;&#10;                    viewModel.toggleDarkMode(enabled)&#10;                }&#10;            )&#10;            &quot;upcoming_tasks&quot; -&gt; UpcomingTasksScreen(&#10;                reminders = allReminders,&#10;                availableClasses = schoolClasses,&#10;                onNavigateBack = { currentScreen = &quot;calendar&quot; }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarScreen(&#10;    selectedDate: LocalDate,&#10;    reminders: List&lt;Reminder&gt;,&#10;    availableClasses: List&lt;SchoolClass&gt; = emptyList(),&#10;    onDateSelected: (LocalDate) -&gt; Unit,&#10;    onAddReminderClick: () -&gt; Unit,&#10;    onSeeMoreClick: () -&gt; Unit,&#10;    onSettingsClick: () -&gt; Unit,&#10;    onUpcomingTasksClick: () -&gt; Unit = {}&#10;) {&#10;    val today = remember { LocalDate.now() }&#10;    val currentMonth = remember { YearMonth.now() }&#10;    val startMonth = remember { currentMonth.minusMonths(12) }&#10;    val endMonth = remember { currentMonth.plusMonths(12) }&#10;    val daysOfWeek = remember { daysOfWeek() }&#10;&#10;    // Collect all reminders from the parent component&#10;    val viewModel: ReminderViewModel = viewModel()&#10;    val allReminders by viewModel.allReminders.collectAsState()&#10;&#10;    val state = rememberCalendarState(&#10;        startMonth = startMonth,&#10;        endMonth = endMonth,&#10;        firstVisibleMonth = currentMonth,&#10;        firstDayOfWeek = daysOfWeek.first()&#10;    )&#10;&#10;    // Track the currently visible month for display&#10;    val visibleMonth by remember {&#10;        derivedStateOf { state.firstVisibleMonth.yearMonth }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .statusBarsPadding()&#10;                .navigationBarsPadding()&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // App Title (without settings button)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 12.dp),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;School Reminders&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onBackground,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_launcher_foreground),&#10;                    contentDescription = &quot;App Icon&quot;,&#10;                    modifier = Modifier.size(24.dp),&#10;                    tint = Color.Unspecified&#10;                )&#10;            }&#10;&#10;            // Month/Year Header&#10;            Text(&#10;                text = visibleMonth.format(&#10;                    DateTimeFormatter.ofPattern(&quot;MMMM yyyy&quot;)&#10;                ),&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onBackground,&#10;                modifier = Modifier.padding(vertical = 16.dp)&#10;            )&#10;&#10;            // Days of Week Header&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                daysOfWeek.forEach { dayOfWeek -&gt;&#10;                    Text(&#10;                        text = dayOfWeek.getDisplayName(TextStyle.SHORT, Locale.getDefault()),&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Calendar&#10;            HorizontalCalendar(&#10;                state = state,&#10;                dayContent = { day -&gt;&#10;                    CalendarDay(&#10;                        day = day,&#10;                        isSelected = selectedDate == day.date,&#10;                        isToday = today == day.date,&#10;                        hasReminders = allReminders.any { it.date == day.date },&#10;                        onClick = { onDateSelected(day.date) }&#10;                    )&#10;                },&#10;                monthHeader = { /* Empty since we have custom header */ },&#10;                monthBody = { _, content -&gt;&#10;                    Column {&#10;                        content()&#10;                    }&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Selected Date Info with Reminder Preview&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                ),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(20.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Selected Date&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = selectedDate.format(DateTimeFormatter.ofPattern(&quot;EEEE, MMMM d, yyyy&quot;)),&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Reminders preview&#10;                    val dayReminders = reminders.filter { it.date == selectedDate }&#10;&#10;                    if (dayReminders.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;No reminders scheduled&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    } else {&#10;                        // Show preview of first 2 reminders&#10;                        val previewReminders = dayReminders.take(2)&#10;&#10;                        previewReminders.forEach { reminder -&gt;&#10;                            val classInfo = availableClasses.find { it.name == reminder.className }&#10;                            val classColor = classInfo?.color ?: &quot;#95A5A6&quot;&#10;&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(vertical = 4.dp)&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(12.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(android.graphics.Color.parseColor(classColor)))&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                                Text(&#10;                                    text = reminder.name,&#10;                                    fontSize = 14.sp,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    maxLines = 1,&#10;                                    overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis,&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;&#10;                                Text(&#10;                                    text = reminder.className,&#10;                                    fontSize = 12.sp,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Show &quot;and X more&quot; if there are additional reminders&#10;                        if (dayReminders.size &gt; 2) {&#10;                            Text(&#10;                                text = &quot;and ${dayReminders.size - 2} more...&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                fontWeight = FontWeight.Medium,&#10;                                modifier = Modifier.padding(top = 4.dp)&#10;                            )&#10;                        }&#10;&#10;                        // See all button if there are reminders&#10;                        if (dayReminders.isNotEmpty()) {&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                            TextButton(&#10;                                onClick = onSeeMoreClick,&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;View All Reminders (${dayReminders.size})&quot;,&#10;                                    fontSize = 14.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            // Bottom Navigation with rounded card background&#10;            Box (&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .widthIn(min = 120.dp, max = 250.dp)&#10;                        .padding(horizontal = 50.dp, vertical = 8.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surface&#10;                    ),&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 12.dp)&#10;                            .padding(vertical = 8.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        // Add Reminder&#10;                        Column(&#10;                            modifier = Modifier.clickable { onAddReminderClick() },&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Add,&#10;                                contentDescription = &quot;Add Reminder&quot;,&#10;                                modifier = Modifier.size(24.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;&#10;                        // Upcoming Tasks&#10;                        Column(&#10;                            modifier = Modifier.clickable { onUpcomingTasksClick() },&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.DateRange,&#10;                                contentDescription = &quot;Upcoming Tasks&quot;,&#10;                                modifier = Modifier.size(22.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;&#10;                        // Settings&#10;                        Column(&#10;                            modifier = Modifier.clickable { onSettingsClick() },&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Settings,&#10;                                contentDescription = &quot;Settings&quot;,&#10;                                modifier = Modifier.size(24.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Settings Floating Action Button&#10;        /*FloatingActionButton(&#10;            onClick = onSettingsClick,&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(16.dp),&#10;            containerColor = MaterialTheme.colorScheme.secondary,&#10;            contentColor = MaterialTheme.colorScheme.onSecondary&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = &quot;Settings&quot;,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }*/&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CalendarDay(&#10;    day: CalendarDay,&#10;    isSelected: Boolean,&#10;    isToday: Boolean,&#10;    hasReminders: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    // Animation states&#10;    var isPressed by remember { mutableStateOf(false) }&#10;    val scale by animateFloatAsState(&#10;        targetValue = if (isPressed) 0.95f else 1f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessLow&#10;        )&#10;    )&#10;&#10;    val backgroundColor by animateColorAsState(&#10;        targetValue = when {&#10;            isSelected -&gt; MaterialTheme.colorScheme.primary&#10;            isToday -&gt; MaterialTheme.colorScheme.primaryContainer&#10;            else -&gt; Color.Transparent&#10;        },&#10;        animationSpec = tween(durationMillis = 300, easing = EaseInOutCubic)&#10;    )&#10;&#10;    val textColor by animateColorAsState(&#10;        targetValue = when {&#10;            isSelected -&gt; MaterialTheme.colorScheme.onPrimary&#10;            isToday -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;            day.position != DayPosition.MonthDate -&gt; MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.3f)&#10;            else -&gt; MaterialTheme.colorScheme.onSurface&#10;        },&#10;        animationSpec = tween(durationMillis = 300, easing = EaseInOutCubic)&#10;    )&#10;&#10;    // Animated reminder dot&#10;    val dotScale by animateFloatAsState(&#10;        targetValue = if (hasReminders) 1f else 0f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessMedium&#10;        )&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .aspectRatio(1f)&#10;            .padding(2.dp)&#10;            .graphicsLayer {&#10;                scaleX = scale&#10;                scaleY = scale&#10;            }&#10;            .clip(CircleShape)&#10;            .background(backgroundColor)&#10;            .pointerInput(Unit) {&#10;                detectTapGestures(&#10;                    onPress = {&#10;                        if (day.position == DayPosition.MonthDate) {&#10;                            isPressed = true&#10;                            tryAwaitRelease()&#10;                            isPressed = false&#10;                        }&#10;                    },&#10;                    onTap = {&#10;                        if (day.position == DayPosition.MonthDate) {&#10;                            onClick()&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;            .padding(bottom = 8.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Date number - always centered&#10;        Text(&#10;            text = day.date.dayOfMonth.toString(),&#10;            fontSize = 16.sp,&#10;            fontWeight = if (isSelected || isToday) FontWeight.Bold else FontWeight.Normal,&#10;            color = textColor&#10;        )&#10;&#10;        // Animated dot indicator for reminders&#10;        if (hasReminders) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(6.dp)&#10;                    .graphicsLayer {&#10;                        scaleX = dotScale&#10;                        scaleY = dotScale&#10;                    }&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        if (isSelected) MaterialTheme.colorScheme.onPrimary&#10;                        else MaterialTheme.colorScheme.primary&#10;                    )&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 2.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_48.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_48.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>